<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">


	<!-- 启用方法控制访问权限  用于直接拦截接口上的方法，拥有权限才能访问此方法-->
	<global-method-security jsr250-annotations="enabled"/>
	<!-- 自己写登录页面，并且登陆页面不拦截 -->
	<http pattern="/jsp/login.jsp" security="none" />
	
	<!-- 配置拦截页面  -->								<!-- 启用页面级权限控制 使用表达式 -->
	<http auto-config='true' access-denied-page="/jsp/403.jsp" use-expressions="true">
									<!-- requires-channel="any" 设置访问类型http或者https -->
     	<intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" requires-channel="any"/>  
    	<!-- intercept-url pattern="/admin/**" 拦截地址的设置有加载先后的顺序，
    	admin/**在前面请求admin/admin.jsp会先去拿用户验证是否有ROLE_ADMIN权限，有则通过，没有就拦截。如果shi 
    	pattern="/**" 设置在前面，当前登录的用户有ROLE_USER权限，那么就可以登录到admin/admin.jsp
    	所以两个配置有先后的。
    	 -->
     	<intercept-url pattern="/**" access="hasRole('ROLE_USER')" requires-channel="any"/>  	
    	
    	<!-- 设置用户默认登录页面 -->
    	<form-login login-page="/jsp/login.jsp"/>
    	<!-- 基于url的权限控制，加载权限资源管理拦截器,如果进行这样的设置，那么
    	 <intercept-url pattern="/admin/**" 就可以不进行配置了，会在数据库的资源权限中得到对应。
    	 对于没有找到资源的权限为null的值就不需要登录才可以查看，相当于public的。可以公共访问
    	  -->
    	<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
  	</http>
  	
  	<!-- 当基于方法权限控制的时候只需要此配置，在接口上加上权限即可控制方法的调用
  	<authentication-manager>
  		<authentication-provider user-service-ref="myUserDetailsService"/>
  	</authentication-manager>
  	  -->
  	
  	
  	<!-- 资源权限控制 -->
  	<beans:bean id="securityFilter" class="com.ucs.security.context.MySecurityFilter">
  		<!-- 用户拥有的权限 -->
    	<beans:property name="authenticationManager" ref="myAuthenticationManager" />
    	<!-- 用户是否拥有所请求资源的权限 -->
    	<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
    	<!-- 资源与权限对应关系 -->
    	<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
  	</beans:bean>
  	
  	
  	<authentication-manager alias="myAuthenticationManager">
  		<!-- 权限控制 引用 id是myUserDetailsService的server -->
  		<authentication-provider user-service-ref="myUserDetailsService"/>
  	</authentication-manager>
</beans:beans>            